"use strict";

/*
===========================================
CAUTION! GLOBAL-SCOPE variable declarations
===========================================
*/
// Define all versions in production!
var versions = JSON.parse(data);
// WHERE DOES THIS DOCUMENTATION LIVE?
var documentationHost = getDomainName();
// Regex to detect and active version, if any!
// Detects version in the form domain_name/VERSION/bla/bla/.../bla.html
var currentVersion = getCurrentVersion();
var latestVersion = versions[0].version === 'latest' ? versions[1].version : versions[0].version;;
// Get data out of the 'data' element generated by build process and stored
// in versions_raw.js, that file needs to load before this file
// First version in object is the latest version

// Define where we want the selector to go first in a version
var landingPage = "index.html";

/* Adobe Analytics */
var wapLocalCode = 'us-en';
var wapSection = 'openvinotoolkit';

(function () {
    if (window.location.protocol === 'file:') {
        return;
    }
    var host = (window.document.location.protocol == 'http:') ? "http://www.intel.com" : "https://www.intel.com";
    var url = host + "/content/dam/www/global/wap/tms-loader.js"; //wap file url
    var po = document.createElement('script');
    po.type = 'text/javascript'; po.async = true; po.src = url;
    var s = document.getElementsByTagName('head')[0];
    s.appendChild(po);
})();

function getDomainName() {
    var protocol = window.location.protocol + "//";
    var index = window.location.href.indexOf(protocol);
    var link = window.location.href.slice(index + protocol.length);
    return protocol + link.split('/')[0];
}

// Get current version from URL
function getCurrentVersion() {
    var protocol = window.location.protocol + "//";
    var index = window.location.href.indexOf(protocol);
    var link = window.location.href.slice(index + protocol.length);
    var wordAfterDomain = link.split('/')[1];
    if (["index.html", "404.html", "", "latest"].indexOf(wordAfterDomain) >= 0) {
        /*
        * If this landing page, 404 or domain.com we should get first version
        * */
        return versions[0].version;
    }
    return link.split('/')[1];
}

/**
 * Handle building the versions links, updating URLs on homepage, and managing
 * the versions selector.
 * @author Amplified - http://amplifiedbydesign.com/
 * @returns {object}
 */
function openVinoVersions() {


    /**
     * Initialize/do this on page load
     * @public
     */
    function init() {
        buildVersionsContent();
        addArchiveButton();
        if ($("body").hasClass("homepage")) {
            updateAllLinks();
        }
    }

    function addArchiveButton() {
        if (location.pathname === '/') return;
        var wrapper = document.createElement('div');
        var link = document.createElement('a');
        var archive_name = currentVersion !== 'latest' ? currentVersion : latestVersion;
        link.href = `/archives/${archive_name}.zip`;
        link.innerText = 'Download .zip';
        wrapper.appendChild(link);
        wrapper.classList.add('download-link');
        document.querySelector('#titlearea').insertBefore(
            wrapper,
            document.querySelector('#versionsSelector')
        );
    }

    // Determine where we'd go if clicking on a version selector option
    function getPageUrlWithVersion(url, version) {
        var fullURL = window.location.pathname.split('/');
        var lastElement = fullURL.slice(-1)[0];
        var newURL = url.replace(getCurrentVersion(), version);

        if ($("body").hasClass("homepage")) {
            if (window.location.protocol == "file:") {
                newURL = url.replace("index.html", version + "/" + landingPage);
            }
            if (lastElement == "404.html") {
                newURL = url.replace("404.html", version + "/" + landingPage);
            } else {
                newURL = documentationHost + "/" + version + "/" + landingPage;
            }
        }

        return newURL;
    }

    // Create version selector and attach handlers to it
    function buildVersionsContent() {
        if (versions && versions.length > 0) {
            var $versionsContent = $('<div id="versionsSelector"></div>');
            var $selectorButton = $(
                '<button type="button" class="current-version version-toggle"></button>'
            );
            var $versionsList = $('<ul id="versionsList"></ul>');
            var listItems = "";
            var url = window.location.href;
            var max_length = 0;
            for (var i = 0, verLength = versions.length; i < verLength; i++) {
                var elementVersion;
                var ver = versions[i];
                // Highlight current version for user
                if (ver.version === currentVersion) {
                    listItems += '<li class="active">';
                } else {
                    listItems += "<li>";
                }
                if (ver.version === 'latest') {
                    elementVersion = 'latest (' + latestVersion + ')';
                }
                else {
                    elementVersion = ver.version;
                }
                listItems +=
                    '<a href="' +
                    getPageUrlWithVersion(url, ver.version) +
                    '">Version ' +
                    elementVersion +
                    "</a>";
                listItems += "</li>";
                if (ver.version.length > max_length){
                    max_length = ver.version.length;
                }
            }
            
            max_length += 'latest ()'.length;
            var scale = 7;
            var versionLength = 'version '.length;
            var align = 5;
            $selectorButton.css("width", ((max_length + versionLength+align) * scale).toString() + "px");

            // handle version selector events
            var handleVersionBlur = function () {
                if ($versionsList.hasClass("opened")) {
                    window.removeEventListener("click", handleVersionBlur, false);
                    $versionsList.removeClass("opened");
                } else {
                    $versionsList.toggleClass("opened");
                }
            };

            $selectorButton.on("click", function () {
                window.addEventListener("click", handleVersionBlur, false);
            });

            $versionsList.append(listItems);
            var menuButtonText;
            if (currentVersion === 'latest') {
                menuButtonText = "Version <strong>latest (" + latestVersion + ")</strong>"
            }
            else {
                menuButtonText = "Version <strong>" + currentVersion + "</strong>";
            }
            $versionsContent.append(
                $selectorButton.html(menuButtonText)
            );
            $versionsContent.append($versionsList);

            // pay attention to search box and layer appropriately
            if ($("#top #MSearchBox").length > 0) {
                $("#top #MSearchBox").before($versionsContent);
            } else {
                $("#titlearea").append($versionsContent);
            }
        }
    }

    // For homepage and footer, update any links with a version in them to
    // point to the current version
    function updateAllLinks() {
        $(".openvino-content a, .api-content a, .footer a").each(function () {
            $(this).attr("href", function (index, old) {
                return old.replace('<version_placeholder>', currentVersion);
            });
        });
        $(".homelink-id").each(function () {
            $(this).attr("href", function (index, old) {
                return old.replace('<domain_placeholder>', documentationHost);
            });
        });
        $('[property="og:url"]').each(function () {
            $(this).attr("content", function (index, old) {
                return old.replace('<domain_placeholder>', documentationHost);
            });
        });
    }

    return {
        init: init
    };
}

function redirection() {
    if(location.protocol === 'file:') return;

    function versionExists(version){
        if(version === 'archives'){
            return true;
        } 
        for(var i =0; i < versions.length; i++) {
            if(versions[i].version === version){
                return true;
            }
        }
        return false;
    }

    function parseUrl() {
        var pathname = window.location.pathname;
        var id = (window.location.href).split(pathname)[1];
        var path = pathname.slice(1).split("/");
        var version = path[0];
        if(["", "index.html", "404.html"].indexOf(version) >= 0) {
            return;
        }
        var pathAfterVersion = path.slice(1).join("/") + id;
        var urlObject = {
            'version': version,
            'pathAfterVersion': pathAfterVersion
        };
        return urlObject;
    }
    


    function redirect(origin, version, page) {
        // Check if page variable is valid otherwise set it to index.html
        var url;
        page = page || "index.html";
        url = [origin, version, page].join("/");
        return url;
    }

    var requestedUrl = parseUrl();
    if (requestedUrl) {
        var requestedVersion = requestedUrl['version'];
        var pathAfterVersion = requestedUrl['pathAfterVersion'];
        var pathChanged = false;
        if(pathAfterVersion.startsWith('_inference_engine_samples_') && (requestedVersion === 'R5' || requestedVersion === '2018_R5')) {
            pathAfterVersion = pathAfterVersion.replace('_inference_engine_samples_', '_samples_');
            pathChanged = true;
        }
        if(pathAfterVersion.startsWith('_samples_') && !(requestedVersion === 'R5' || requestedVersion === '2018_R5')) {
            pathAfterVersion = pathAfterVersion.replace('_samples_', '_inference_engine_samples_');
            pathChanged = true;
        }

        if (requestedVersion === 'R5') {
            window.location.href = redirect(documentationHost, "2018_R5", pathAfterVersion);
        }
        else if (requestedVersion === '2019_R2.0.1') {
            window.location.href = redirect(documentationHost, "2019_R2", pathAfterVersion);
        }
        else if (!versionExists(requestedVersion)) {
            window.location.href = redirect(documentationHost, "latest", pathAfterVersion);
        }
        else if (pathChanged) {
            window.location.href = redirect(documentationHost, requestedVersion, pathAfterVersion);
        }
    }
};

function updateAllLinksForArchive() {
    $(".openvino-content a, .api-content a, .footer a").each(function () {
        $(this).attr("href", function (index, old) {
            return old.replace('/<version_placeholder>/', '');
        });
    });
    $(".homelink-id").each(function () {
        $(this).attr("href", function (index, old) {
            return old.replace('<domain_placeholder>', 'index.html');
        });
    });
    $('[property="og:url"]').each(function () {
        $(this).attr("content", function (index, old) {
            return old.replace('<domain_placeholder>', 'index.html');
        });
    });
}

/**
 * Builds and updates verison selector menu on full "load" event
 * @author Amplified - http://amplifiedbydesign.com/
 */
(function openVinoVersionsLayout() {
    var VersionsBuilder = openVinoVersions();

    window.addEventListener(
        "load",
        function loadVersions() {
            window.removeEventListener("load", loadVersions, false);
            if (window.location.protocol === 'file:') {
                updateAllLinksForArchive();
            }
            else {
                VersionsBuilder.init();
            }
        },
        false
    );
    redirection();
})();
